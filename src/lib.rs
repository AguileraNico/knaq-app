 use near_contract_standards::fungible_token::metadata::{
     FungibleTokenMetadata, FungibleTokenMetadataProvider, FT_METADATA_SPEC,
 };
 use near_contract_standards::fungible_token::FungibleToken;
 use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};
 use near_sdk::collections::LazyOption;
 use near_sdk::json_types::U128;
 use near_sdk::{
     log, near_bindgen, AccountId, Balance, BorshStorageKey, PanicOnDefault,
     PromiseOrValue,
 };
 
 #[near_bindgen]
 #[derive(BorshDeserialize, BorshSerialize, PanicOnDefault)]
 pub struct Contract {
     token: FungibleToken,
     metadata: LazyOption<FungibleTokenMetadata>,
 }
 
 #[derive(BorshSerialize, BorshStorageKey)]
 enum StorageKey {
     FungibleToken,
     Metadata,
 }

 const ICON: &str = "data:image/svg+xml;charset=UTF-8,%3csvg width='78' height='64' viewBox='0 0 78 64' fill='none' xmlns='http://www.w3.org/2000/svg'%3e%3cpath d='M11.3116 43.0701L17.7826 51.5168C17.8307 51.58 17.8604 51.6555 17.8684 51.7348C17.8763 51.8141 17.8622 51.8941 17.8276 51.9658C17.793 52.0374 17.7393 52.0978 17.6725 52.1403C17.6057 52.1827 17.5286 52.2054 17.4497 52.2058H13.0382C12.9731 52.2056 12.9089 52.1901 12.8506 52.1606C12.7923 52.1312 12.7415 52.0885 12.7023 52.0359L6.2406 43.4067L12.0738 35.5419C12.1131 35.4894 12.1639 35.4467 12.2222 35.4172C12.2804 35.3878 12.3447 35.3723 12.4098 35.3721H16.6751C16.7537 35.3752 16.8299 35.4004 16.8952 35.4448C16.9604 35.4893 17.0121 35.5513 17.0444 35.6239C17.0768 35.6964 17.0884 35.7767 17.0781 35.8555C17.0678 35.9344 17.036 36.0089 16.9862 36.0705L11.3116 43.0701Z' fill='%23392269'/%3e%3cpath d='M22.6169 35.3594H25.983C26.1027 35.3594 26.2174 35.4074 26.302 35.493C26.3866 35.5785 26.4341 35.6945 26.4341 35.8155V37.0424C27.0615 36.4093 27.807 35.9083 28.6273 35.5687C29.4476 35.229 30.3263 35.0573 31.2127 35.0636C35.2851 35.0636 38.057 37.0487 38.057 42.3275V51.7652C38.0562 51.886 38.0084 52.0015 37.924 52.0869C37.8396 52.1723 37.7253 52.2206 37.6059 52.2214H34.2584C34.1976 52.2202 34.1375 52.2066 34.082 52.1814C34.0264 52.1562 33.9765 52.1198 33.9353 52.0745C33.894 52.0293 33.8622 51.976 33.8418 51.918C33.8214 51.86 33.8129 51.7984 33.8167 51.7369V43.07C33.8167 40.3739 32.4478 39.103 30.0834 39.103C29.3979 39.1051 28.7201 39.2503 28.0927 39.5297C27.4653 39.809 26.9017 40.2164 26.4373 40.7263V51.7369C26.4373 51.8579 26.3897 51.9739 26.3051 52.0595C26.2205 52.145 26.1058 52.1931 25.9862 52.1931H22.6169C22.4994 52.1898 22.3878 52.1403 22.3059 52.0551C22.224 51.9699 22.1782 51.8558 22.1782 51.7369V35.8155C22.1782 35.6967 22.224 35.5825 22.3059 35.4973C22.3878 35.4121 22.4994 35.3626 22.6169 35.3594Z' fill='%23392269'/%3e%3cpath d='M43.9809 36.9168C43.9455 36.8135 43.9481 36.7007 43.988 36.5991C44.028 36.4974 44.1028 36.4137 44.1987 36.3631C45.9136 35.461 47.8128 34.9752 49.7457 34.9443C54.6705 34.9443 56.4095 37.4894 56.4095 41.944V51.7372C56.4095 51.8581 56.362 51.9742 56.2774 52.0597C56.1928 52.1453 56.0781 52.1933 55.9584 52.1933H53.1585C53.0389 52.1933 52.9241 52.1453 52.8395 52.0597C52.7549 51.9742 52.7074 51.8581 52.7074 51.7372V50.2586C51.8176 51.517 50.0412 52.4293 47.7826 52.4293C44.7462 52.4293 42.5623 50.5197 42.5623 47.2637C42.5623 43.5578 45.2658 41.7993 48.635 41.7993C50.1159 41.7993 51.5968 42.2869 52.4118 42.8846C52.5238 40.0753 51.7896 38.5432 49.3008 38.5432C47.9397 38.5487 46.5983 38.8716 45.3809 39.487C45.3233 39.5154 45.2603 39.5309 45.1962 39.5326C45.1322 39.5342 45.0685 39.522 45.0095 39.4966C44.9506 39.4713 44.8976 39.4334 44.8544 39.3857C44.8111 39.3379 44.7784 39.2812 44.7587 39.2196L43.9809 36.9168ZM52.4118 47.2637V45.5429C51.6714 44.9829 50.707 44.7187 49.4875 44.7187C48.0813 44.7187 46.8213 45.3919 46.8213 46.8138C46.8213 48.0722 47.8573 48.7989 49.1919 48.7989C50.9683 48.7989 51.8954 48.0124 52.4118 47.2637Z' fill='%23392269'/%3e%3cpath d='M73.7565 51.3446C72.5293 52.1429 71.1059 52.5787 69.6468 52.6029C64.3145 52.6029 60.9825 49.0827 60.9825 43.7692C60.9825 38.8648 64.9056 34.9355 70.5335 34.9355C73.3832 34.9355 76.236 35.8353 78 36.9584V58.9797C78 59.1683 77.9259 59.3491 77.7941 59.4824C77.6622 59.6158 77.4834 59.6907 77.2969 59.6907H74.4472C74.2607 59.6907 74.0819 59.6158 73.95 59.4824C73.8181 59.3491 73.7441 59.1683 73.7441 58.9797L73.7565 51.3446ZM73.7565 47.0756V39.8148C72.747 39.2928 71.6329 39.0108 70.4992 38.9906C67.242 38.9906 65.5371 41.3123 65.5371 43.9706C65.5371 46.6289 67.3509 48.6139 70.2037 48.6139C71.5431 48.5975 72.8215 48.0456 73.7596 47.0787' fill='%23392269'/%3e%3cpath d='M5.95508 30.5623V43.4039C8.68969 42.5167 8.40659 39.1506 8.40659 39.1506V29.112L6.48396 28.832L5.95508 30.5623Z' fill='url(%23paint0_linear_42_2177)'/%3e%3cpath fill-rule='evenodd' clip-rule='evenodd' d='M8.68577 0.90602C8.68577 1.08521 8.73832 1.26038 8.83677 1.40938C8.93522 1.55837 9.07515 1.6745 9.23887 1.74307C9.33125 1.78177 9.42886 1.80434 9.5276 1.81038C9.54477 1.94811 9.56974 2.08501 9.60248 2.2204C9.71495 2.68551 9.91692 3.12368 10.1968 3.50987C10.4768 3.89606 10.8292 4.22271 11.234 4.47117C11.6388 4.71964 12.088 4.88505 12.556 4.95796C13.031 5.03219 13.8595 4.87915 14.5302 4.69021C14.8188 4.81898 15.1235 4.90917 15.4366 4.95796C16.1211 5.06492 17.5397 4.69999 18.1619 4.43574C18.1938 4.42534 18.225 4.41273 18.2552 4.39799C18.3019 4.39799 18.3859 4.20294 18.1775 4.19036H18.0872C14.9354 4.13689 13.4835 2.70449 12.8558 1.7186C12.9427 1.67525 13.0226 1.6177 13.092 1.54778C13.2174 1.42138 13.303 1.26024 13.3379 1.0847C13.3728 0.909153 13.3555 0.727083 13.2882 0.561475C13.2209 0.395868 13.1065 0.254151 12.9596 0.154219C12.8126 0.0542869 12.6397 0.000621735 12.4626 0C12.345 0 12.2285 0.0234349 12.1198 0.0689667C12.0111 0.114498 11.9123 0.181235 11.8291 0.265367C11.7459 0.349499 11.6799 0.449378 11.6349 0.559301C11.5898 0.669225 11.5667 0.78704 11.5667 0.90602H11.5635C11.5635 1.08508 11.616 1.26012 11.7143 1.40905C11.8126 1.55797 11.9524 1.6741 12.1159 1.74277C12.2094 1.78202 12.3083 1.80476 12.4083 1.81055C12.4255 1.94822 12.4504 2.08507 12.4832 2.2204C12.5956 2.68551 12.7976 3.12368 13.0775 3.50987C13.2075 3.68915 13.3531 3.85561 13.5122 4.00736C11.5078 3.58192 10.4782 2.50828 9.97584 1.7197C10.0641 1.676 10.1451 1.61768 10.2153 1.54667C10.3406 1.41996 10.4259 1.25853 10.4605 1.08278C10.4951 0.907025 10.4773 0.724855 10.4095 0.559301C10.3417 0.393748 10.2269 0.252247 10.0795 0.152692C9.93219 0.0531372 9.75896 0 9.58175 0C9.34412 0 9.11622 0.0954554 8.94819 0.265367C8.78017 0.435279 8.68577 0.665729 8.68577 0.90602ZM18.3232 6.66654C18.1735 6.38674 17.9802 6.12985 17.7482 5.90666C17.1792 5.35947 16.4219 5.0578 15.6368 5.06558C14.8516 5.07335 14.1003 5.38995 13.542 5.94829C12.9838 6.50663 12.6625 7.26283 12.6461 8.05664L12.6493 8.0535C12.6491 8.74073 12.8782 9.40736 13.2985 9.94606C12.4596 12.4825 12.8208 13.3196 13.7656 15.5087C13.8189 15.6324 13.8742 15.7603 13.9311 15.8931C14.5876 17.4189 13.9311 19.8035 13.9311 19.8035C15.0293 21.411 13.8502 24.5034 11.3147 24.5034C6.86281 24.5066 6.2406 29.0744 6.2406 29.0744C10.7672 30.6946 17.7204 29.4771 19.6181 24.494C20.813 21.3744 19.2032 19.5226 17.5404 17.6099C16.3761 16.2706 15.1858 14.9014 14.9142 13.0461C14.871 12.3759 14.9244 11.703 15.0729 11.0484C15.0729 11.0484 15.0728 11.0484 15.0728 11.0484C15.3514 10.2605 15.8332 9.56223 16.4682 9.02576C17.0605 8.52532 17.7662 8.18262 18.5209 8.02747C18.5267 8.02707 18.5325 8.02634 18.5383 8.02529C19.1345 7.92464 19.7411 7.90349 20.3427 7.96237C20.3786 7.96598 20.4147 7.95734 20.4452 7.93783C20.4757 7.91832 20.4988 7.88906 20.511 7.85471C20.5232 7.82035 20.5236 7.78287 20.5123 7.74823C20.501 7.71358 20.4785 7.68376 20.4485 7.66351C19.8124 7.22372 19.1123 6.88723 18.3734 6.66626H18.3299C18.3276 6.66631 18.3254 6.6664 18.3232 6.66654Z' fill='url(%23paint1_linear_42_2177)'/%3e%3cpath d='M13.7884 19.9136C13.7884 19.9136 13.3933 21.7382 9.18714 22.1157C8.92458 22.1386 8.66375 22.1786 8.40626 22.2353C8.40626 22.2133 8.32538 22.2353 8.2476 22.2699C8.16982 22.3045 8.09205 22.3265 8.08893 22.3045C1.88861 24.0127 2.54504 32.8496 2.54504 32.8496L2.42993 56.3337L2.54504 56.3683L3.03036 56.2708C3.03036 56.2708 6.17564 55.2987 6.17564 47.6479C6.17564 47.6479 6.1943 37.0871 6.13208 33.0446C6.10408 31.3269 6.19742 29.4929 6.80407 27.8444C7.39206 26.2495 8.88225 25.1389 10.4938 24.7898C10.8015 24.7222 11.1133 24.6749 11.4271 24.6482C11.7981 24.6285 12.1636 24.5489 12.5097 24.4122C13.0573 24.1794 13.5247 23.7883 13.8535 23.288C14.1822 22.7877 14.3576 22.2005 14.3577 21.5998C14.358 20.9551 14.1553 20.3271 13.779 19.8066C13.807 19.8538 13.8195 19.8947 13.8039 19.9262' fill='url(%23paint2_linear_42_2177)'/%3e%3cpath d='M7.47615 18.9912C3.72423 20.4698 0.267852 25.3459 0.0811894 32.0718C-0.12414 39.4207 0.124744 56.6476 0.124744 63.9996C2.30248 63.9996 2.46114 58.6516 2.46114 58.6516C2.46114 58.6516 2.51714 43.2367 2.55447 34.2394C2.5887 25.9971 4.76643 23.1501 8.37525 22.2409C8.64218 22.1773 8.9137 22.1352 9.18723 22.1151C13.3965 21.747 13.7885 19.9129 13.7885 19.9129C13.7885 19.9129 13.7885 19.8437 13.7636 19.7965L13.6827 19.6864C13.5894 19.5763 13.4587 19.4505 13.356 19.3372C13.0489 19.056 12.6878 18.8418 12.2952 18.708L12.1552 18.664C11.6492 18.5179 11.1259 18.4417 10.5996 18.4375C10.5996 18.4375 10.5001 18.4375 10.3165 18.4375C9.3474 18.4537 8.38921 18.6477 7.4886 19.0101' fill='url(%23paint3_linear_42_2177)'/%3e%3cdefs%3e%3clinearGradient id='paint0_linear_42_2177' x1='5.95508' y1='28.832' x2='8.43864' y2='28.832' gradientUnits='userSpaceOnUse'%3e%3cstop stop-color='%23802E8F'/%3e%3cstop offset='1' stop-color='%23283F94'/%3e%3c/linearGradient%3e%3clinearGradient id='paint1_linear_42_2177' x1='13.3806' y1='0' x2='13.3806' y2='29.748' gradientUnits='userSpaceOnUse'%3e%3cstop stop-color='%23007EC3'/%3e%3cstop offset='1' stop-color='%230A497A'/%3e%3c/linearGradient%3e%3clinearGradient id='paint2_linear_42_2177' x1='2.42993' y1='19.8066' x2='14.4727' y2='19.8066' gradientUnits='userSpaceOnUse'%3e%3cstop stop-color='%23FFD30D'/%3e%3cstop offset='1' stop-color='%23E32729'/%3e%3c/linearGradient%3e%3clinearGradient id='paint3_linear_42_2177' x1='0' y1='18.4375' x2='13.9215' y2='18.4375' gradientUnits='userSpaceOnUse'%3e%3cstop stop-color='%23007160'/%3e%3cstop offset='1' stop-color='%2339B54A'/%3e%3c/linearGradient%3e%3c/defs%3e%3c/svg%3e";
 
 #[near_bindgen]
 impl Contract {

     #[init]
     pub fn new_default_meta(owner_id: AccountId) -> Self {
         Self::new(
             owner_id,
             FungibleTokenMetadata {
                 spec: FT_METADATA_SPEC.to_string(),
                 name: "Knaq fungible token".to_string(),
                 symbol: "KNAQ".to_string(),
                 icon: Some(ICON.to_string()),
                 reference: None,
                 reference_hash: None,
                 decimals: 24,
             },
         )
     }

     #[init]
     pub fn new(owner_id: AccountId, metadata: FungibleTokenMetadata) -> Self {
         require!(!env::state_exists(), "Already initialized");
         metadata.assert_valid();
        const TOTAL_SUPPLY: Balance = 1_000_000_000_000_000_000_000_000_000_000_000;
         let mut this = Self {
             token: FungibleToken::new(StorageKey::FungibleToken),
             metadata: LazyOption::new(StorageKey::Metadata, Some(&metadata)),
         };
         this.token.internal_register_account(&owner_id);
         this.token.internal_deposit(&owner_id, TOTAL_SUPPLY);
 
         near_contract_standards::fungible_token::events::FtMint {
             owner_id: &owner_id,
             amount: &TOTAL_SUPPLY.into(),
             memo: Some("new tokens are minted"),
         }.emit();
 
         this
     }
 
     fn on_account_closed(&mut self, account_id: AccountId, balance: Balance) {
         log!("Closed @{} with {}", account_id, balance);
     }
 
     fn on_tokens_burned(&mut self, account_id: AccountId, amount: Balance) {
         log!("Account @{} burned {}", account_id, amount);
     }
 }
 
 near_contract_standards::impl_fungible_token_core!(Contract, token, on_tokens_burned);
 near_contract_standards::impl_fungible_token_storage!(Contract, token, on_account_closed);
 
 #[near_bindgen]
 impl FungibleTokenMetadataProvider for Contract {
     fn ft_metadata(&self) -> FungibleTokenMetadata {
         self.metadata.get().unwrap()
     }
 }
